<Window x:Class="PathFinder.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:core="clr-namespace:PathFinder.Core"
        Title="PathFinder" MinHeight="650" Height="650" Width="800"
        Icon="Images/pathicon.ico">

    <Window.Resources>
        <!--Static converters-->
        <core:RadioIsCheckedConverter x:Key="RadioIsChecked" />
        <core:HeuristicsEnabledConverter x:Key="HeuristicsEnabledConverter" />

        <!--Style for disabled TextBlocks-->
        <Style TargetType="TextBlock" x:Key="TextBlockDisable">
            <Setter Property="Foreground" Value="Black" />
            <Style.Triggers>
                <Trigger Property="TextBlock.IsEnabled" Value="False">
                    <Setter Property="TextBlock.Foreground" Value="Gray" />
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <!--Main panel-->
    <DockPanel>
        <!--Control panel docked on the right-->
        <DockPanel DockPanel.Dock="Right" Background="White" Panel.ZIndex="99">
            <!--About button docked at bottom right corner-->
            <Button Margin="0,3,6,3" Padding="2"
                    HorizontalAlignment="Right" Content="About"
                    Click="About_Click" DockPanel.Dock="Bottom" />

            <!--Controls that modify the entire grid-->
            <GroupBox Header="Grid Controls" DockPanel.Dock="Bottom">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="40" />
                    </Grid.RowDefinitions>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="65" />
                        <ColumnDefinition Width="65" />
                        <ColumnDefinition Width="65" />
                    </Grid.ColumnDefinitions>

                    <Button Grid.Column="0" Content="Clear All" Command="{Binding ClearAllCommand}" />
                    <Button Grid.Column="1" Content="Clear Path" Command="{Binding ClearPathCommand}" />
                    <Button Grid.Column="2" Command="{Binding GenMazeCommand}">
                        <TextBlock Text="Generate Maze" TextAlignment="Center" 
                                   TextWrapping="Wrap" Style="{StaticResource TextBlockDisable}" />
                    </Button>
                </Grid>
            </GroupBox>

            <!--All controls relating to the playback of the search animation-->
            <GroupBox Header="Search Controls" DockPanel.Dock="Bottom">
                <StackPanel Orientation="Vertical">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="65" />
                            <ColumnDefinition Width="65" />
                            <ColumnDefinition Width="65" />
                        </Grid.ColumnDefinitions>

                        <!--Main playback buttons-->
                        <Button Grid.Column="0" Command="{Binding PlayCommand}">
                            <TextBlock Text="Play  Search" TextAlignment="Center" 
                                   TextWrapping="Wrap" Style="{StaticResource TextBlockDisable}" />
                        </Button>
                        <Button Grid.Column="1" Command="{Binding PauseCommand}" >
                            <TextBlock Text="Pause Search" TextAlignment="Center" 
                                   TextWrapping="Wrap" Style="{StaticResource TextBlockDisable}" />
                        </Button>
                        <Button Grid.Column="2" Command="{Binding StopCommand}" >
                            <TextBlock Text="Cancel Search" TextAlignment="Center" 
                                   TextWrapping="Wrap" Style="{StaticResource TextBlockDisable}" />
                        </Button>
                    </Grid>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="40" />
                        </Grid.RowDefinitions>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>

                        <!--Playback step buttons-->
                        <Button Grid.Column="0" Command="{Binding StepBackwardCommand}" >
                            <TextBlock Text="Step Backward" TextAlignment="Center" 
                                   TextWrapping="Wrap" Style="{StaticResource TextBlockDisable}" />
                        </Button>
                        <Button Grid.Column="1" Command="{Binding StepForwardCommand}" >
                            <TextBlock Text="Step Forward" TextAlignment="Center" 
                                   TextWrapping="Wrap" Style="{StaticResource TextBlockDisable}" />
                        </Button>
                    </Grid>

                    <!--Slider to allow for variable playback speed-->
                    <Label Content="Animation Speed:"/>
                    <Slider Minimum="0" Maximum="30"
                            IsSnapToTickEnabled="True" IsDirectionReversed="True"
                            Value="{Binding AnimSleepTime}"/>
                </StackPanel>
            </GroupBox>

            <!--Statistics about the resulting path from a search-->
            <GroupBox Header="Stats" DockPanel.Dock="Bottom">
                <StackPanel  Orientation="Vertical">
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Length:" />
                        <Label Content="{Binding StatPathLength}" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Time:" />
                        <Label Content="{Binding StatTime}" />
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="Nodes Explored:" />
                        <Label Content="{Binding StatNodesExplored}" />
                    </StackPanel>
                </StackPanel>
            </GroupBox>

            <!--All controls for setting up the search options-->
            <GroupBox Header="Search Options">
                <StackPanel Orientation="Vertical">
                    <!--Algorithm selection group-->
                    <GroupBox Header="Algorithm">
                        <StackPanel Orientation="Vertical">
                            <RadioButton Content="A-Star" IsChecked="{Binding Algo, 
                                Converter={StaticResource RadioIsChecked}, 
                                ConverterParameter={x:Static core:Algorithm.AStar}}" />
                            <RadioButton Content="Breadth-First" IsChecked="{Binding Algo, 
                                Converter={StaticResource RadioIsChecked}, 
                                ConverterParameter={x:Static core:Algorithm.BreadthFirst}}" />
                            <RadioButton Content="Depth-First" IsChecked="{Binding Algo, 
                                Converter={StaticResource RadioIsChecked}, 
                                ConverterParameter={x:Static core:Algorithm.DepthFirst}}" />
                            <RadioButton Content="Depth-First (Random)" IsChecked="{Binding Algo, 
                                Converter={StaticResource RadioIsChecked},
                                ConverterParameter={x:Static core:Algorithm.DepthFirstRandom}}" />
                            <RadioButton Content="Hill-Climbing" IsChecked="{Binding Algo, 
                                Converter={StaticResource RadioIsChecked},
                                ConverterParameter={x:Static core:Algorithm.HillClimbing}}"/>
                            <RadioButton Content="Best-First" IsChecked="{Binding Algo, 
                                Converter={StaticResource RadioIsChecked}, 
                                ConverterParameter={x:Static core:Algorithm.BestFirst}}" />
                            <RadioButton Content="Dijkstra" IsChecked="{Binding Algo, 
                                Converter={StaticResource RadioIsChecked}, 
                                ConverterParameter={x:Static core:Algorithm.Dijkstra}}" />
                        </StackPanel>
                    </GroupBox>

                    <!--Controls for selecting how neigboring nodes should be found-->
                    <GroupBox Header="Optional Settings">
                        <StackPanel Orientation="Vertical">
                            <CheckBox Content="Diagonals Allowed"  Name="DiagBox" 
                                      IsChecked="{Binding DiagonalsAllowed}">
                                <CheckBox.ToolTip>
                                    <ToolTip Width="256">
                                        <StackPanel Orientation="Vertical">
                                            <TextBlock TextWrapping="Wrap">Check to allow the path to move diagonally</TextBlock>
                                            <Separator />
                                            <Image Source="Images/normalvsdiag.png" />
                                        </StackPanel>
                                    </ToolTip>
                                </CheckBox.ToolTip>
                            </CheckBox>

                            <CheckBox Content="Corner Crossing Allowed" 
                                      IsEnabled="{Binding ElementName=DiagBox, Path=IsChecked}"
                                      IsChecked="{Binding CornerCutAllowed}">
                                <CheckBox.ToolTip>
                                    <ToolTip Width="256">
                                        <StackPanel Orientation="Vertical">
                                            <TextBlock TextWrapping="Wrap">
                                                Check to allow the path to move closely along a corner (touching it) instead of keeping a distance
                                            </TextBlock>
                                            <Separator />
                                            <Image Source="Images/cornercross.png" />
                                        </StackPanel>
                                    </ToolTip>
                                </CheckBox.ToolTip>
                            </CheckBox>
                        </StackPanel>
                    </GroupBox>

                    <!--Group for selecting the heuristic function to be used in searching-->
                    <!--This will get disabled when an algorithm that doesn't use heuristics is selected-->
                    <GroupBox Header="Heuristic Function"
                              IsEnabled="{Binding Algo, Converter={StaticResource HeuristicsEnabledConverter}}">
                        <StackPanel Orientation="Vertical">
                            <RadioButton Content="Manhattan" IsChecked="{Binding HeuristicFunction, 
                                Converter={StaticResource RadioIsChecked},
                                ConverterParameter={x:Static core:Heuristic.Manhattan}}">
                                <RadioButton.ToolTip>
                                    <ToolTip Width="256">
                                        <StackPanel Orientation="Vertical">
                                            <TextBlock TextWrapping="Wrap">
                                                The Manhattan heuristic is the sum of the horizontal and vertical distances between two nodes
                                            </TextBlock>
                                            <Separator />
                                            <Image Source="Images/manhattan.png" />
                                        </StackPanel>
                                    </ToolTip>
                                </RadioButton.ToolTip>
                            </RadioButton>

                            <RadioButton Content="Euclidean" IsChecked="{Binding HeuristicFunction, 
                                Converter={StaticResource RadioIsChecked}, 
                                ConverterParameter={x:Static core:Heuristic.Euclidean}}">
                                <RadioButton.ToolTip>
                                    <ToolTip Width="256">
                                        <StackPanel Orientation="Vertical">
                                            <TextBlock TextWrapping="Wrap">
                                                The Euclidean heuristic is the exact distance between two nodes
                                            </TextBlock>
                                            <Separator />
                                            <Image Source="Images/euclidean.png" />
                                        </StackPanel>
                                    </ToolTip>
                                </RadioButton.ToolTip>
                            </RadioButton>

                            <RadioButton Content="Chebyshev" IsChecked="{Binding HeuristicFunction, 
                                Converter={StaticResource RadioIsChecked}, 
                                ConverterParameter={x:Static core:Heuristic.Chebyshev}}">
                                <RadioButton.ToolTip>
                                    <ToolTip Width="256">
                                        <StackPanel Orientation="Vertical">
                                            <TextBlock TextWrapping="Wrap">
                                                The Chebyshev heuristic is the maximum of the horizontal and vertical distances between two nodes
                                            </TextBlock>
                                            <Separator />
                                            <Image Source="Images/chebyshev.png" />
                                        </StackPanel>
                                    </ToolTip>
                                </RadioButton.ToolTip>
                            </RadioButton>
                        </StackPanel>

                        <!--Fade the groupbox in/out on enable/disable-->
                        <GroupBox.Style>
                            <Style TargetType="GroupBox">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <!--Fade out when disabled-->
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>

                                        <!--Fade back in when reenabled-->
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </GroupBox.Style>
                    </GroupBox>
                </StackPanel>
            </GroupBox>
        </DockPanel>

        <!--This takes up the remainder of the screen space on the main panel-->
        <Grid>
            <!--Canvas to display all dynamically loaded elements (Nodes)-->
            <ItemsControl  Name="ItemsCanvas" Padding="0"
                           ItemsSource="{Binding Grid.Nodes, IsAsync=True}">

                <ItemsControl.Resources>
                    <!--View template for Node-->
                    <DataTemplate DataType="{x:Type core:Node}">
                        <!--All Nodes are displayed as Rectangles-->
                        <Rectangle Stroke="#CC000000" StrokeThickness="0.25"
                                   RenderTransformOrigin="0.5,0.5"
                                   Width="{x:Static core:Node.Nodesize}"
                                   Height="{x:Static core:Node.Nodesize}"
                                   Fill="White" Name="nodeRect"
                                   ToolTipService.InitialShowDelay="500">

                            <!--Using RenderTransform instead of Canvas options for performance-->
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <!--Default scale, will be used in animations-->
                                    <ScaleTransform x:Name="rectScale" ScaleX="1" ScaleY="1" />
                                    <!--Translate the Rectangle to the correct location-->
                                    <TranslateTransform X="{Binding CoordX}" Y="{Binding CoordY}" />
                                </TransformGroup>
                            </Rectangle.RenderTransform>

                            <!--Send a command to update the Node appearance when this view is loaded-->
                            <i:Interaction.Triggers>
                                <i:EventTrigger EventName="Loaded">
                                    <i:InvokeCommandAction Command="{Binding UpdateColorCommand}" />
                                </i:EventTrigger>
                            </i:Interaction.Triggers>

                            <!--Tooltip to display this Node's scores on mouse hover-->
                            <Rectangle.ToolTip>
                                <ToolTip StaysOpen="True" Placement="RelativePoint"
                                         HorizontalOffset="20" VerticalOffset="20"
                                         FontSize="14" FontWeight="Bold">
                                    <StackPanel>
                                        <TextBlock Text="{Binding GScore, StringFormat='{}G={0:f4}'}" />
                                        <TextBlock Text="{Binding HScore, StringFormat='{}H={0:f4}'}" />
                                        <Separator />
                                        <TextBlock Text="{Binding FScore, StringFormat='{}F={0:f4}'}" />
                                    </StackPanel>
                                </ToolTip>
                            </Rectangle.ToolTip>
                        </Rectangle>
                    </DataTemplate>
                </ItemsControl.Resources>

                <!--Internally uses a canvas to display all items-->
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Canvas IsItemsHost="True" Background="White"
                            Width="{Binding ElementName=ItemsCanvas, Path=ActualWidth}"
                            Height="{Binding ElementName=ItemsCanvas, Path=ActualHeight}"
                            VerticalAlignment="Stretch" HorizontalAlignment="Stretch" />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>

                <!--Style for the item containers-->
                <ItemsControl.ItemContainerStyle>
                    <Style TargetType="ContentPresenter">
                        <Style.Triggers>
                            <!--Forces whichever node the mouse is currently over to be drawn above all others-->
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Panel.ZIndex" Value="99" />
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ItemsControl.ItemContainerStyle>
            </ItemsControl>

            <!--Polyline to display the resulting path, drawn above all nodes-->
            <Polyline Points="{Binding Grid.Path}"  Panel.ZIndex="999"
                      Stroke="Yellow" StrokeThickness="4" Name="PathLine"
                      IsHitTestVisible="False" />
        </Grid>
    </DockPanel>
</Window>
