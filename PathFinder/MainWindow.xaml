<Window x:Class="PathFinder.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:pf="clr-namespace:PathFinder"
        Title="PathFinder" Height="600" Width="800"
        x:Name="view">
    <Window.Resources>
        <pf:RadioIsCheckedConverter x:Key="RadioIsChecked"></pf:RadioIsCheckedConverter>
        <pf:HeuristicsEnabledConverter x:Key="HeuristicsEnabledConverter"></pf:HeuristicsEnabledConverter>
    </Window.Resources>
    <DockPanel>
        <DockPanel DockPanel.Dock="Right" Background="White" Panel.ZIndex="99">

            <GroupBox Header="Grid Controls" DockPanel.Dock="Bottom">
                <StackPanel Orientation="Vertical">
                    <Button Content="Clear Walls" Command="{Binding ClearWallsCommand}" />
                    <Button Content="Clear Path" Command="{Binding ClearPathCommand}" />
                    <Button Content="Generate Maze" Command="{Binding GenMazeCommand}" />
                </StackPanel>
            </GroupBox>

            <GroupBox Header="Playback Controls" DockPanel.Dock="Bottom">
                <StackPanel Orientation="Vertical">
                    <Button Content="Start" Command="{Binding StartCommand}" />
                    <Button Content="Pause" Command="{Binding PauseCommand}" />
                    <Button Content="Stop" Command="{Binding StopCommand}" />
                </StackPanel>
            </GroupBox>

            <GroupBox Header="Search Options">
                <StackPanel Orientation="Vertical">
                    <GroupBox Header="Algorithm">
                        <StackPanel Orientation="Vertical">
                            <RadioButton IsChecked="{Binding Algo, 
								Converter={StaticResource RadioIsChecked}, 
								ConverterParameter={x:Static pf:Algorithm.AStar}}">
                                A-Star
                            </RadioButton>
                            <RadioButton IsChecked="{Binding Algo, 
								Converter={StaticResource RadioIsChecked}, 
								ConverterParameter={x:Static pf:Algorithm.BreadthFirst}}">
                                Breadth-First
                            </RadioButton>
                            <RadioButton IsChecked="{Binding Algo, 
								Converter={StaticResource RadioIsChecked}, 
								ConverterParameter={x:Static pf:Algorithm.DepthFirst}}">
                                Depth-First
                            </RadioButton>
                            <RadioButton IsChecked="{Binding Algo, 
								Converter={StaticResource RadioIsChecked},
								ConverterParameter={x:Static pf:Algorithm.DepthFirstRandom}}">
                                Depth-First (Random)
                            </RadioButton>
                            <RadioButton IsChecked="{Binding Algo, 
								Converter={StaticResource RadioIsChecked}, 
								ConverterParameter={x:Static pf:Algorithm.BestFirst}}">
                                Best-First
                            </RadioButton>
                            <RadioButton IsChecked="{Binding Algo, 
								Converter={StaticResource RadioIsChecked}, 
								ConverterParameter={x:Static pf:Algorithm.Dijkstra}}">
                                Dijkstra
                            </RadioButton>
                            <RadioButton IsChecked="{Binding Algo, 
								Converter={StaticResource RadioIsChecked}, 
								ConverterParameter={x:Static pf:Algorithm.JumpPoint}}">
                                Jump Point Search
                            </RadioButton>
                        </StackPanel>
                    </GroupBox>

                    <GroupBox Header="Optional Settings">
                        <StackPanel Orientation="Vertical">
                            <CheckBox Content="Diagonals Allowed"  Name="DiagBox" 
                                      IsChecked="{Binding DiagonalsAllowed}"/>
                            <CheckBox Content="Corner Crossing Allowed" 
                                      IsEnabled="{Binding ElementName=DiagBox, Path=IsChecked}"
                                      IsChecked="{Binding CornerCutAllowed}"/>
                        </StackPanel>
                    </GroupBox>

                    <GroupBox Header="Heuristic Function"
                              IsEnabled="{Binding Algo, Converter={StaticResource HeuristicsEnabledConverter}}">
                        <StackPanel Orientation="Vertical">
                            <RadioButton IsChecked="{Binding HeuristicFunction, 
								Converter={StaticResource RadioIsChecked},
								ConverterParameter={x:Static pf:Heuristic.Manhattan}}">
                                Manhattan
                            </RadioButton>
                            <RadioButton IsChecked="{Binding HeuristicFunction, 
								Converter={StaticResource RadioIsChecked}, 
								ConverterParameter={x:Static pf:Heuristic.Euclidean}}">
                                Euclidean
                            </RadioButton>
                            <RadioButton IsChecked="{Binding HeuristicFunction, 
								Converter={StaticResource RadioIsChecked}, 
								ConverterParameter={x:Static pf:Heuristic.Chebyshev}}">
                                Chebyshev
                            </RadioButton>
                        </StackPanel>

                        <!--Fade the groupbox in/out on enable/disable-->
                        <GroupBox.Style>
                            <Style TargetType="GroupBox">
                                <Style.Triggers>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.2" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.2" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </GroupBox.Style>
                    </GroupBox>
                </StackPanel>
            </GroupBox>
        </DockPanel>

        <!-- Canvas to display all dynamic elements -->
        <ItemsControl  Name="ItemsCanvas" Padding="0"
                       ScrollViewer.CanContentScroll="True"
                       VirtualizingStackPanel.IsVirtualizing="True"
                       VirtualizingStackPanel.VirtualizationMode="Recycling">
            <ItemsControl.Resources>
                <!-- Combine all lists into one -->
                <CompositeCollection x:Key="Col">
                    <CollectionContainer Collection="{Binding DataContext.Grid.Nodes,Source={x:Reference view}}" />
                    <CollectionContainer Collection="{Binding DataContext.Grid.Path,Source={x:Reference view}}" />
                </CompositeCollection>

                <!--Template for Node-->
                <DataTemplate DataType="{x:Type pf:Node}">
                    <Rectangle Stroke="#CC000000" StrokeThickness="0.25"
                               RenderTransformOrigin="0.5,0.5"
                               Width="{x:Static pf:Node.Nodesize}"
                               Height="{x:Static pf:Node.Nodesize}"
                               Name="nodeRect" Fill="White">
                        <Rectangle.RenderTransform>
                            <TransformGroup>
                                <ScaleTransform x:Name="rectScale" ScaleX="1" ScaleY="1" />
                                <TranslateTransform X="{Binding CoordX}" Y="{Binding CoordY}"></TranslateTransform>
                            </TransformGroup>
                        </Rectangle.RenderTransform>
                    </Rectangle>

                    <DataTemplate.Triggers>
                        <!--Node triggers to colorize based on current state-->
                        <DataTrigger Binding="{Binding State}" Value="{x:Static pf:NodeState.Start}">
                            <Setter TargetName="nodeRect" Property="Fill" Value="#00FF00"></Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding State}" Value="{x:Static pf:NodeState.End}">
                            <Setter TargetName="nodeRect" Property="Fill" Value="Red"></Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding State}" Value="{x:Static pf:NodeState.Open}">
                            <Setter TargetName="nodeRect" Property="Fill" Value="Orange"></Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding State}" Value="{x:Static pf:NodeState.Closed}">
                            <Setter TargetName="nodeRect" Property="Fill" Value="Cyan"></Setter>
                        </DataTrigger>

                        <!--The wall trigger has a nice transition animation-->
                        <DataTrigger Binding="{Binding State}" Value="{x:Static pf:NodeState.Wall}">
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="nodeRect" 
                                                        Storyboard.TargetProperty="Fill.Color"
                                                        To="Gray" Duration="0:0:0.1"/>
                                        <DoubleAnimation Storyboard.TargetName="rectScale" 
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="1.2" Duration="0:0:0.1" AutoReverse="True" />
                                        <DoubleAnimation Storyboard.TargetName="rectScale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         To="1.2" Duration="0:0:0.1" AutoReverse="True" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>

                            <DataTrigger.ExitActions>
                                <!--The only time you ever exit a wall state is to go to an empty state, 
                                    so make that switch here-->
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ColorAnimation Storyboard.TargetName="nodeRect" 
                                                        Storyboard.TargetProperty="Fill.Color" 
                                                        To="White" Duration="0:0:0.1"/>
                                        <DoubleAnimation Storyboard.TargetName="rectScale" 
                                                         Storyboard.TargetProperty="ScaleX"
                                                         To="1.2" Duration="0:0:0.1" AutoReverse="True" />
                                        <DoubleAnimation Storyboard.TargetName="rectScale"
                                                         Storyboard.TargetProperty="ScaleY"
                                                         To="1.2" Duration="0:0:0.1" AutoReverse="True" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>

                <DataTemplate DataType="{x:Type pf:PathSegment}">
                    <Line X1="{Binding X1}" Y1 ="{Binding Y1}"
                          X2="{Binding X2}" Y2="{Binding Y2}"
                          Stroke="Yellow" StrokeThickness="3"/>
                </DataTemplate>
            </ItemsControl.Resources>

            <ItemsControl.ItemsSource>
                <StaticResource ResourceKey="Col" />
            </ItemsControl.ItemsSource>

            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas IsItemsHost="True" Background="White"
                            Width="{Binding ElementName=ItemsCanvas, Path=ActualWidth}"
                            Height="{Binding ElementName=ItemsCanvas, Path=ActualHeight}"
                            VerticalAlignment="Top" HorizontalAlignment="Left" />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>

            <ItemsControl.ItemContainerStyle>
                <Style TargetType="ContentPresenter">
                    <!--                    <Setter Property="Canvas.Left" Value="{Binding CoordX}" />-->
                    <!--                    <Setter Property="Canvas.Top" Value="{Binding CoordY}" />-->

                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Panel.ZIndex" Value="10"></Setter>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </ItemsControl.ItemContainerStyle>
        </ItemsControl>
    </DockPanel>
</Window>
